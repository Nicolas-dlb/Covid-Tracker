{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe771141.chunk.js","sourcesContent":["import React from 'react';\nimport {Card, CardContent, Typography} from '@material-ui/core';\nimport './InfoBox.css';\n\nfunction InfoBox({title, cases, total, active, isRed, ...props}) {\n    return (\n            <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected' }`}>\n                <CardContent>\n                  <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\n                  <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n                  <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                      {total} Total\n                  </Typography>\n                </CardContent>\n            </Card>\n    )\n}\n\nexport default InfoBox\n","import { Circle, Popup } from \"react-leaflet\";\nimport React from \"react\";\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      multiplier: 300,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      multiplier: 600,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      multiplier: 1500,\n    },\n  };\n\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n   return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType='cases') => (\n    data.map(country => (\n      <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n          Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n      >\n        <Popup>\n            <div className=\"info-container\">\n                <div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})`}} ></div>\n                <div className=\"info-name\">{country.country}</div>\n                <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n            </div>\n        </Popup>\n      </Circle>\n    ))\n)","import React from 'react';\nimport \"./Map.css\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from './util';\n\nfunction Map({ countries,casesType, center, zoom }) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react';\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({countries}) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country, cases}) => (\n              <tr>\n                  <td>{country}</td>\n                  <td>\n                      <strong>{numeral(cases).format(\"0,0\")}</strong>\n                  </td>\n              </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n const [countries, setCountries] = useState(['USA', 'UK', 'INDIA' ]);\n const [country, setCountry] = useState('worldwide');\n const [countryInfo, setCountryInfo] = useState({});\n const [tableData, setTableData] = useState([]);\n const [casesType, setCasesType] = useState(\"cases\");\n const [mapCenter, setMapCenter] = useState({ lat: \t48.856614, lng: 20.3522219 });\n const [mapZoom, setMapZoom] = useState(3);\n const [mapCountries, setMapCountries] = useState([]);\n \n useEffect(() => {\n   fetch(\"https://disease.sh/v3/covid-19/all\")\n     .then(response => response.json())\n       .then(data => {\n         setCountryInfo(data);\n       });\n }, []);\n \n useEffect(() => {\n   const getCountriesData = async () => {\n     await fetch(\"https://disease.sh/v3/covid-19/countries\")\n       .then(response => response.json())\n         .then(data => {\n           const countries = data.map(country => ({\n             name: country.country,\n             value: country.countryInfo.iso2\n           }));\n           const sortedData = sortData(data);\n           setTableData(sortedData);\n           setMapCountries(data);\n           setCountries(countries);\n         });\n   };\n   getCountriesData();\n }, []);\n\n const onCountryChange = async (event) => {\n   const countryCode = event.target.value;\n   setCountry(countryCode);\n\n   const url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n   await fetch(url)\n     .then(response => response.json())\n       .then(data => {\n         setCountry(countryCode);\n         setCountryInfo(data);\n\n         if (countryCode == 'worldwide') {\n          setMapCenter([ 10.856614, 20.3522219 ]);\n          setMapZoom(2);\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n        }\n       })\n }\n\n \n return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n          <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            {countries.map(country => ( <MenuItem value={country.value}>{country.name}</MenuItem> ))}\n          </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox \n          isRed\n          active={casesType === \"cases\"} \n          onClick={e => setCasesType(\"cases\")} \n          title=\"Coronavirus Cases\" \n          cases={prettyPrintStat(countryInfo.todayCases)} \n          total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox \n          active={casesType === \"recovered\"} \n          onClick={e => setCasesType(\"recovered\")} \n          title=\"Recovered\" \n          cases={prettyPrintStat(countryInfo.todayRecovered)} \n          total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox \n          isRed\n          active={casesType === \"deaths\"} \n          onClick={e => setCasesType(\"deaths\")} \n          title=\"Deaths\" \n          cases={prettyPrintStat(countryInfo.todayDeaths)} \n          total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} casesType={casesType}/>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n         <h3>Live cases by country</h3>\n         <Table countries={tableData}/>\n         <h3 className='app__graphTitle'>Worldwide new {casesType}</h3>\n         <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}