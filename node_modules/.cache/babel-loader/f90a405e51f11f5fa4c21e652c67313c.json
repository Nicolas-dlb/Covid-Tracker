{"ast":null,"code":"import _defineProperty from\"/home/morty/covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"/home/morty/covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/morty/covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/morty/covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import'./App.css';import React,{useState,useEffect}from'react';import{MenuItem,FormControl,Select,Card,CardContent}from'@material-ui/core';import InfoBox from'./InfoBox';import Map from'./Map';import Table from'./Table';import{sortData,prettyPrintStat}from'./util';import LineGraph from'./LineGraph';import\"leaflet/dist/leaflet.css\";function App(){var _useState=useState(['USA','UK','INDIA']),_useState2=_slicedToArray(_useState,2),countries=_useState2[0],setCountries=_useState2[1];var _useState3=useState('worldwide'),_useState4=_slicedToArray(_useState3,2),country=_useState4[0],setCountry=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),countryInfo=_useState6[0],setCountryInfo=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),tableData=_useState8[0],setTableData=_useState8[1];var _useState9=useState(\"cases\"),_useState10=_slicedToArray(_useState9,2),casesType=_useState10[0],setCasesType=_useState10[1];var _useState11=useState({lat:48.856614,lng:20.3522219}),_useState12=_slicedToArray(_useState11,2),mapCenter=_useState12[0],setMapCenter=_useState12[1];var _useState13=useState(3),_useState14=_slicedToArray(_useState13,2),mapZoom=_useState14[0],setMapZoom=_useState14[1];var _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),mapCountries=_useState16[0],setMapCountries=_useState16[1];useEffect(function(){fetch(\"https://disease.sh/v3/covid-19/all\").then(function(response){return response.json();}).then(function(data){setCountryInfo(data);});},[]);useEffect(function(){var getCountriesData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://disease.sh/v3/covid-19/countries\").then(function(response){return response.json();}).then(function(data){var countries=data.map(function(country){return{name:country.country,value:country.countryInfo.iso2};});var sortedData=sortData(data);setTableData(sortedData);setMapCountries(data);setCountries(countries);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function getCountriesData(){return _ref.apply(this,arguments);};}();getCountriesData();},[]);var onCountryChange=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event){var countryCode,url;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:countryCode=event.target.value;setCountry(countryCode);url=countryCode==='worldwide'?\"https://disease.sh/v3/covid-19/all\":\"https://disease.sh/v3/covid-19/countries/\".concat(countryCode);_context2.next=5;return fetch(url).then(function(response){return response.json();}).then(function(data){setCountry(countryCode);setCountryInfo(data);if(countryCode=='worldwide'){setMapCenter([10.856614,20.3522219]);setMapZoom(2);}else{setMapCenter([data.countryInfo.lat,data.countryInfo.long]);setMapZoom(4);}});case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function onCountryChange(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"app__left\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"app__header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"COVID-19 TRACKER\"}),/*#__PURE__*/_jsx(FormControl,{className:\"app__dropdown\",children:/*#__PURE__*/_jsxs(Select,{variant:\"outlined\",value:country,onChange:onCountryChange,children:[/*#__PURE__*/_jsx(MenuItem,{value:\"worldwide\",children:\"Worldwide\"}),countries.map(function(country){return/*#__PURE__*/_jsx(MenuItem,{value:country.value,children:country.name});})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"app__stats\",children:[/*#__PURE__*/_jsx(InfoBox,{isRed:true,active:casesType===\"cases\",onClick:function onClick(e){return setCasesType(\"cases\");},title:\"Coronavirus Cases\",cases:prettyPrintStat(countryInfo.todayCases),total:prettyPrintStat(countryInfo.cases)}),/*#__PURE__*/_jsx(InfoBox,{active:casesType===\"recovered\",onClick:function onClick(e){return setCasesType(\"recovered\");},title:\"Recovered\",cases:prettyPrintStat(countryInfo.todayRecovered),total:prettyPrintStat(countryInfo.recovered)}),/*#__PURE__*/_jsx(InfoBox,{isRed:true,active:casesType===\"deaths\",onClick:function onClick(e){return setCasesType(\"deaths\");},title:\"Deaths\",cases:prettyPrintStat(countryInfo.todayDeaths),total:prettyPrintStat(countryInfo.deaths)})]}),/*#__PURE__*/_jsx(Map,_defineProperty({casesType:casesType,countries:mapCountries,center:mapCenter,zoom:mapZoom},\"casesType\",casesType))]}),/*#__PURE__*/_jsx(Card,{className:\"app__right\",children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Live cases by country\"}),/*#__PURE__*/_jsx(Table,{countries:tableData}),/*#__PURE__*/_jsxs(\"h3\",{className:\"app__graphTitle\",children:[\"Worldwide new \",casesType]}),/*#__PURE__*/_jsx(LineGraph,{className:\"app__graph\",casesType:casesType})]})})]});}export default App;","map":{"version":3,"sources":["/home/morty/covid/src/App.js"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","Card","CardContent","InfoBox","Map","Table","sortData","prettyPrintStat","LineGraph","App","countries","setCountries","country","setCountry","countryInfo","setCountryInfo","tableData","setTableData","casesType","setCasesType","lat","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","fetch","then","response","json","data","getCountriesData","map","name","value","iso2","sortedData","onCountryChange","event","countryCode","target","url","long","e","todayCases","cases","todayRecovered","recovered","todayDeaths","deaths"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n const [countries, setCountries] = useState(['USA', 'UK', 'INDIA' ]);\n const [country, setCountry] = useState('worldwide');\n const [countryInfo, setCountryInfo] = useState({});\n const [tableData, setTableData] = useState([]);\n const [casesType, setCasesType] = useState(\"cases\");\n const [mapCenter, setMapCenter] = useState({ lat: \t48.856614, lng: 20.3522219 });\n const [mapZoom, setMapZoom] = useState(3);\n const [mapCountries, setMapCountries] = useState([]);\n \n useEffect(() => {\n   fetch(\"https://disease.sh/v3/covid-19/all\")\n     .then(response => response.json())\n       .then(data => {\n         setCountryInfo(data);\n       });\n }, []);\n \n useEffect(() => {\n   const getCountriesData = async () => {\n     await fetch(\"https://disease.sh/v3/covid-19/countries\")\n       .then(response => response.json())\n         .then(data => {\n           const countries = data.map(country => ({\n             name: country.country,\n             value: country.countryInfo.iso2\n           }));\n           const sortedData = sortData(data);\n           setTableData(sortedData);\n           setMapCountries(data);\n           setCountries(countries);\n         });\n   };\n   getCountriesData();\n }, []);\n\n const onCountryChange = async (event) => {\n   const countryCode = event.target.value;\n   setCountry(countryCode);\n\n   const url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n   await fetch(url)\n     .then(response => response.json())\n       .then(data => {\n         setCountry(countryCode);\n         setCountryInfo(data);\n\n         if (countryCode == 'worldwide') {\n          setMapCenter([ 10.856614, 20.3522219 ]);\n          setMapZoom(2);\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n        }\n       })\n }\n\n \n return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n          <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            {countries.map(country => ( <MenuItem value={country.value}>{country.name}</MenuItem> ))}\n          </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox \n          isRed\n          active={casesType === \"cases\"} \n          onClick={e => setCasesType(\"cases\")} \n          title=\"Coronavirus Cases\" \n          cases={prettyPrintStat(countryInfo.todayCases)} \n          total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox \n          active={casesType === \"recovered\"} \n          onClick={e => setCasesType(\"recovered\")} \n          title=\"Recovered\" \n          cases={prettyPrintStat(countryInfo.todayRecovered)} \n          total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox \n          isRed\n          active={casesType === \"deaths\"} \n          onClick={e => setCasesType(\"deaths\")} \n          title=\"Deaths\" \n          cases={prettyPrintStat(countryInfo.todayDeaths)} \n          total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} casesType={casesType}/>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n         <h3>Live cases by country</h3>\n         <Table countries={tableData}/>\n         <h3 className='app__graphTitle'>Worldwide new {casesType}</h3>\n         <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}