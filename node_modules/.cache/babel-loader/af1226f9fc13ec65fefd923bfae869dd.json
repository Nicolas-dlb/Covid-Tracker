{"ast":null,"code":"import _toConsumableArray from\"/home/morty/covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Circle,Popup}from\"react-leaflet\";import React from\"react\";import numeral from\"numeral\";var casesTypeColors={cases:{hex:\"#CC1034\",multiplier:300},recovered:{hex:\"#7dd71d\",multiplier:600},deaths:{hex:\"#fb4443\",multiplier:1500}};export var sortData=function sortData(data){var sortedData=_toConsumableArray(data);return sortedData.sort(function(a,b){return a.cases>b.cases?-1:1;});};export var prettyPrintStat=function prettyPrintStat(stat){return stat?\"+\".concat(numeral(stat).format(\"0.0a\")):\"+0\";};export var showDataOnMap=function showDataOnMap(data){var casesType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'cases';return data.map(function(country){return/*#__PURE__*/_jsx(Circle,{center:[country.countryInfo.lat,country.countryInfo.long],fillOpacity:0.4,color:casesTypeColors[casesType].hex,fillColor:casesTypeColors[casesType].hex,radius:Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier,children:/*#__PURE__*/_jsx(Popup,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"info-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"info-flag\",style:{backgroundImage:\"url(\".concat(country.countryInfo.flag,\")\")}}),/*#__PURE__*/_jsx(\"div\",{className:\"info-name\",children:country.country}),/*#__PURE__*/_jsxs(\"div\",{className:\"info-confirmed\",children:[\"Cases: \",numeral(country.cases).format(\"0,0\")]}),/*#__PURE__*/_jsxs(\"div\",{className:\"info-recovered\",children:[\"Recovered: \",numeral(country.recovered).format(\"0,0\")]}),/*#__PURE__*/_jsxs(\"div\",{className:\"info-deaths\",children:[\"Deaths: \",numeral(country.deaths).format(\"0,0\")]})]})})});});};","map":{"version":3,"sources":["/home/morty/covid/src/util.js"],"names":["Circle","Popup","React","numeral","casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","format","showDataOnMap","casesType","map","country","countryInfo","lat","long","Math","sqrt","backgroundImage","flag"],"mappings":"wOAAA,OAASA,MAAT,CAAiBC,KAAjB,KAA8B,eAA9B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,SAApB,CAEA,GAAMC,CAAAA,eAAe,CAAG,CACpBC,KAAK,CAAE,CACLC,GAAG,CAAE,SADA,CAELC,UAAU,CAAE,GAFP,CADa,CAKpBC,SAAS,CAAE,CACTF,GAAG,CAAE,SADI,CAETC,UAAU,CAAE,GAFH,CALS,CASpBE,MAAM,CAAE,CACNH,GAAG,CAAE,SADC,CAENC,UAAU,CAAE,IAFN,CATY,CAAxB,CAgBA,MAAO,IAAMG,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,CAAU,CAC9B,GAAMC,CAAAA,UAAU,oBAAOD,IAAP,CAAhB,CAED,MAAOC,CAAAA,UAAU,CAACC,IAAX,CAAgB,SAACC,CAAD,CAAIC,CAAJ,QAAWD,CAAAA,CAAC,CAACT,KAAF,CAAUU,CAAC,CAACV,KAAZ,CAAoB,CAAC,CAArB,CAAyB,CAApC,EAAhB,CAAP,CACF,CAJM,CAMP,MAAO,IAAMW,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,IAAD,QAC7BA,CAAAA,IAAI,YAAOd,OAAO,CAACc,IAAD,CAAP,CAAcC,MAAd,CAAqB,MAArB,CAAP,EAAwC,IADf,EAAxB,CAGP,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACR,IAAD,KAAOS,CAAAA,SAAP,2DAAiB,OAAjB,OACzBT,CAAAA,IAAI,CAACU,GAAL,CAAS,SAAAC,OAAO,qBACd,KAAC,MAAD,EACA,MAAM,CAAE,CAACA,OAAO,CAACC,WAAR,CAAoBC,GAArB,CAA0BF,OAAO,CAACC,WAAR,CAAoBE,IAA9C,CADR,CAEA,WAAW,CAAE,GAFb,CAGA,KAAK,CAAErB,eAAe,CAACgB,SAAD,CAAf,CAA2Bd,GAHlC,CAIA,SAAS,CAAEF,eAAe,CAACgB,SAAD,CAAf,CAA2Bd,GAJtC,CAKA,MAAM,CACFoB,IAAI,CAACC,IAAL,CAAUL,OAAO,CAACF,SAAD,CAAjB,EAAgChB,eAAe,CAACgB,SAAD,CAAf,CAA2Bb,UAN/D,uBASE,KAAC,KAAD,wBACI,aAAK,SAAS,CAAC,gBAAf,wBACI,YAAK,SAAS,CAAC,WAAf,CAA2B,KAAK,CAAE,CAAEqB,eAAe,eAASN,OAAO,CAACC,WAAR,CAAoBM,IAA7B,KAAjB,CAAlC,EADJ,cAEI,YAAK,SAAS,CAAC,WAAf,UAA4BP,OAAO,CAACA,OAApC,EAFJ,cAGI,aAAK,SAAS,CAAC,gBAAf,qBAAwCnB,OAAO,CAACmB,OAAO,CAACjB,KAAT,CAAP,CAAuBa,MAAvB,CAA8B,KAA9B,CAAxC,GAHJ,cAII,aAAK,SAAS,CAAC,gBAAf,yBAA4Cf,OAAO,CAACmB,OAAO,CAACd,SAAT,CAAP,CAA2BU,MAA3B,CAAkC,KAAlC,CAA5C,GAJJ,cAKI,aAAK,SAAS,CAAC,aAAf,sBAAsCf,OAAO,CAACmB,OAAO,CAACb,MAAT,CAAP,CAAwBS,MAAxB,CAA+B,KAA/B,CAAtC,GALJ,GADJ,EATF,EADc,EAAhB,CADyB,EAAtB","sourcesContent":["import { Circle, Popup } from \"react-leaflet\";\nimport React from \"react\";\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      multiplier: 300,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      multiplier: 600,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      multiplier: 1500,\n    },\n  };\n\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n   return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType='cases') => (\n    data.map(country => (\n      <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n          Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n      >\n        <Popup>\n            <div className=\"info-container\">\n                <div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})`}} ></div>\n                <div className=\"info-name\">{country.country}</div>\n                <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n            </div>\n        </Popup>\n      </Circle>\n    ))\n)"]},"metadata":{},"sourceType":"module"}